#include "gtest/gtest.h"
#include "ruCubeStateConverter.h"
#include <vector>
#include <iostream>
#include "ruCube.h"
#include "testCustomDefinitions.h"

using cornersArray = std::array<int8_t, 6>;
using edgesArray = std::array<int8_t, 7>;

namespace {
    class ruCubeStateConverterConvertVectCornersToIntCornersTestFixture: public testing::TestWithParam<std::tuple<std::tuple<cornersArray, cornersArray>, uint64_t>> {
        public:
            struct toString {
                template <class ParamType>
                std::string operator()(const testing::TestParamInfo<ParamType>& testData) const {
                    ruCubeStateConverter conv;
                    const auto &[corners, expected] = testData.param;
                    const auto &[co, cp] = corners;

                    return conv.containerToString(co) + "_" + conv.containerToString(cp);
                }
            };

        protected:
            ruCubeStateConverter conv;
    };

    INSTANTIATE_TEST_SUITE_P (
        ruCubeStateConverterTests,
        ruCubeStateConverterConvertVectCornersToIntCornersTestFixture,
        ::testing::ValuesIn(testDataGenerators::combine2VectorsLinear<std::tuple<cornersArray, cornersArray>, uint64_t> (
            {
                { { 0, 0, 0, 0, 0, 0 }, { 0, 1, 2, 3, 4, 5 } },
                { { 1, 1, 1, 1, 1, 1 }, { 0, 1, 2, 3, 4, 5 } },
                { { 0, 1, 0, 1, 0, 1 }, { 0, 1, 2, 3, 4, 5 } },
                { { 2, 2, 2, 2, 2, 2 }, { 0, 1, 2, 3, 4, 5 } },
                { { 2, 0, 2, 0, 2, 0 }, { 0, 1, 2, 3, 4, 5 } },
                { { 2, 1, 2, 1, 2, 1 }, { 0, 1, 2, 3, 4, 5 } },
                { { 2, 1, 2, 1, 2, 1 }, { 5, 4, 3, 2, 1, 0 } },
                { { 2, 0, 2, 0, 2, 0 }, { 5, 4, 3, 2, 1, 0 } },
                { { 2, 1, 2, 1, 0, 0 }, { 5, 4, 3, 2, 1, 0 } },
                { { 2, 1, 2, 1, 0, 0 }, { 2, 4, 3, 1, 5, 0 } },
                { { 2, 1, 1, 0, 1, 1 }, { 0, 4, 3, 1, 2, 5 } },

                { {  0,  0,  0,  0,  0,  0 }, {  0,  1,  2,  3, -1, -1 } },
                { { -1,  1,  1,  1,  1, -1 }, {  0,  1,  2,  3,  4,  5 } },
                { { -1,  1,  1,  1,  1, -1 }, {  0, -1, -1,  3,  4,  5 } },
                { { -1, -1, -1, -1, -1, -1 }, {  0,  1,  2,  3,  4,  5 } },
                { {  0,  0,  0,  0,  0,  0 }, { -1, -1, -1, -1, -1, -1 } },
                { { -1, -1, -1, -1, -1, -1 }, { -1, -1, -1, -1, -1, -1 } },
                { {  2,  2,  2,  2,  2, -1 }, { -1, -1, -1, -1, -1, -1 } },
                { {  2,  2,  2,  1,  1, -1 }, { -1, -1, -1, -1, -1, -1 } },
                { {  2,  2,  2,  1,  1,  1 }, {  5,  4,  3, -1, -1,  1 } }
            },
            {
                0101112131415,
                0202122232425,
                0102112231425,
                0404142434445,
                0401142134415,
                0402142234425,
                0452443224120,
                0451443124110,
                0452443221110,
                0422443211510,
                0402423112225,

                0101112131415,
                0402122232415,
                0402122232415,
                0101112131415,
                0101112131415,
                0101112131415,
                0404142434445,
                0404142232425,
                0454443202221,
            }
        )),
        ruCubeStateConverterConvertVectCornersToIntCornersTestFixture::toString()
    );

    TEST_P(ruCubeStateConverterConvertVectCornersToIntCornersTestFixture, convertVectCornersToIntCornersTest) {
        const auto &[corners, expected] = GetParam();
        const auto &[co, cp] = corners;
        ASSERT_EQ(expected, conv.vectCornersToIntCorners(co, cp));
    }
}

namespace {
    class ruCubeStateConverterConvertVectEdgesToIntEdgesTestFixture: public testing::TestWithParam<std::tuple<edgesArray, uint64_t>> {
        public:
            struct toString {
                template <class ParamType>
                std::string operator()(const testing::TestParamInfo<ParamType>& testData) const {
                    ruCubeStateConverter conv;
                    const auto &[edges, expected] = testData.param;
                    return conv.containerToString(edges);
                }
            };

        protected:
            ruCubeStateConverter conv;
    };

    INSTANTIATE_TEST_SUITE_P (
        ruCubeStateConverterTests,
        ruCubeStateConverterConvertVectEdgesToIntEdgesTestFixture,
        ::testing::ValuesIn(testDataGenerators::combine2VectorsLinear<edgesArray, uint64_t> (
            {
                { 0, 1, 2, 3, 4, 5, 6 },
                { 6, 5, 4, 3, 2, 1, 0 },
                { 1, 3, 0, 2, 4, 5, 6 },
                { 6, 5, 1, 3, 4, 2, 0 },
                { 2, 0, 1, 3, 6, 4, 5 },
            },
            {
                00123456,
                06543210,
                01302456,
                06513420,
                02013645,
            }
        )),
        ruCubeStateConverterConvertVectEdgesToIntEdgesTestFixture::toString()
    );

    TEST_P(ruCubeStateConverterConvertVectEdgesToIntEdgesTestFixture, convertVectEdgesToIntEdgesTest) {
        const auto &[edges, expected] = GetParam();
        ASSERT_EQ(expected, conv.vectEdgesToIntEdges(edges));
    }
}

TEST(ruCubeStateConverterTest, convertVectEdgesWithIgnoredPiecesToIntTest) {
    ruCubeStateConverter conv;

    const std::vector<edgesArray> edgesPerm = {
        {  0,  1,  2,  3,  4,  5, -1 },
        {  6,  5, -1,  3,  2,  1,  0 },
        {  6,  5, -1, -1, -1, -1,  0 },
        { -1, -1, -1, -1, -1, -1,  1 },
        {  3, -1,  0, -1, -1, -1,  1 },
    };

    const std::vector<uint64_t> expectedEdges = {
        00123456,
        06543210,
        06512340,
        00234561,
        03204561,
    };

    for (size_t i = 0; i < std::size(edgesPerm); ++i) {
        auto edges = conv.vectEdgesToIntEdges(edgesPerm[i]);
        ASSERT_EQ(expectedEdges[i], edges);
    }
}

TEST(ruCubeStateConverterTest, convertIntEdgesToLexIndexEdgesTest) {
    ruCubeStateConverter conv;

    const std::vector<uint32_t> edgesInts = {
        00123456,
        00123465,
        00123546,
        00123564,
        00123645,

        00123654,
        00124356,
        00124365,
        00124536,
        00124563,

        00124635,
        00124653,
        00125346,
        00125364,
        00125436,

        00125463,
        00125634,
        00125643,
        00126345,
        00126354,

        00126435,
        00126453,
        00126534,
        00126543,
        00132456,

        00132465,
        00132546,
        00132564,
        00132645,
        00132654,

        00134256,
        00134265,
        00134526,
        00134562,
        00134625,

        00134652,
        00135246,
        00135264,
        00135426,
        00135462,

        00135624,
        00135642,
        00136245,
        00136254,
        00136425,

        00136452,
        00136524,
        00136542,
        00142356,
        00142365,

        00142536,
        00142563,
        00142635,
        00142653,
        00143256,

        00143265,
        00143526,
        00143562,
        00143625,
        00143652,

        00145236,
        00145263,
        00145326,
        00145362,
        00145623,

        00145632,
        00146235,
        00146253,
        00146325,
        00146352,

        00146523,
        00146532,
        00152346,
        00152364,
        00152436,

        00152463,
        00152634,
        00152643,
        00153246,
        00153264,

        00153426,
        00153462,
        00153624,
        00153642,
        00154236,

        00154263,
        00154326,
        00154362,
        00154623,
        00154632,

        00156234,
        00156243,
        00156324,
        00156342,
        00156423,

        00156432,
        00162345,
        00162354,
        00162435,
        00162453,

        00162534,
        00162543,
        00163245,
        00163254,
        00163425,

        00163452,
        00163524,
        00163542,
        00164235,
        00164253,

        00164325,
        00164352,
        00164523,
        00164532,
        00165234,

        00165243,
        00165324,
        00165342,
        00165423,
        00165432,

        00213456,
        00213465,
        00213546,
        00213564,
        00213645,

        00213654,
        00214356,
        00214365,
        00214536,
        00214563,

        00214635,
        00214653,
        00215346,
        00215364,
        00215436,

        00215463,
        00215634,
        00215643,
        00216345,
        00216354,

        00216435,
        00216453,
        00216534,
        00216543,
        00231456,

        00231465,
        00231546,
        00231564,
        00231645,
        00231654,

        00234156,
        00234165,
        00234516,
        00234561,
        00234615,

        00234651,
        00235146,
        00235164,
        00235416,
        00235461,

        00235614,
        00235641,
        00236145,
        00236154,
        00236415,

        00236451,
        00236514,
        00236541,
        00241356,
        00241365,

        00241536,
        00241563,
        00241635,
        00241653,
        00243156,

        00243165,
        00243516,
        00243561,
        00243615,
        00243651,

        00245136,
        00245163,
        00245316,
        00245361,
        00245613,

        00245631,
        00246135,
        00246153,
        00246315,
        00246351,

        00246513,
        00246531,
        00251346,
        00251364,
        00251436,

        00251463,
        00251634,
        00251643,
        00253146,
        00253164,

        00253416,
        00253461,
        00253614,
        00253641,
        00254136,

        00254163,
        00254316,
        00254361,
        00254613,
        00254631,

        00256134,
        00256143,
        00256314,
        00256341,
        00256413,

        00256431,
        00261345,
        00261354,
        00261435,
        00261453,

        00261534,
        00261543,
        00263145,
        00263154,
        00263415,

        00263451,
        00263514,
        00263541,
        00264135,
        00264153,

        00264315,
        00264351,
        00264513,
        00264531,
        00265134,

        00265143,
        00265314,
        00265341,
        00265413,
        00265431,

        00312456,
        00312465,
        00312546,
        00312564,
        00312645,

        00312654,
        00314256,
        00314265,
        00314526,
        00314562,

        00314625,
        00314652,
        00315246,
        00315264,
        00315426,

        00315462,
        00315624,
        00315642,
        00316245,
        00316254,

        00316425,
        00316452,
        00316524,
        00316542,
        00321456,

        00321465,
        00321546,
        00321564,
        00321645,
        00321654,

        00324156,
        00324165,
        00324516,
        00324561,
        00324615,

        00324651,
        00325146,
        00325164,
        00325416,
        00325461,

        00325614,
        00325641,
        00326145,
        00326154,
        00326415,

        00326451,
        00326514,
        00326541,
        00341256,
        00341265,

        00341526,
        00341562,
        00341625,
        00341652,
        00342156,

        00342165,
        00342516,
        00342561,
        00342615,
        00342651,

        00345126,
        00345162,
        00345216,
        00345261,
        00345612,

        00345621,
        00346125,
        00346152,
        00346215,
        00346251,

        00346512,
        00346521,
        00351246,
        00351264,
        00351426,

        00351462,
        00351624,
        00351642,
        00352146,
        00352164,

        00352416,
        00352461,
        00352614,
        00352641,
        00354126,

        00354162,
        00354216,
        00354261,
        00354612,
        00354621,
    };

    for (size_t i = 0; i < std::size(edgesInts); ++i) {
        uint16_t edgesLexIndex = conv.intEdgesToLexIndexEdges(edgesInts[i]);
        ASSERT_EQ(i, edgesLexIndex);
    }
}

TEST(ruCubeStateConverterTest, convertLexIndexEdgesToIntEdgesTest) {
    ruCubeStateConverter conv;

    const std::vector<uint32_t> expectedEdgesInts = {
        00123456,
        00123465,
        00123546,
        00123564,
        00123645,

        00123654,
        00124356,
        00124365,
        00124536,
        00124563,

        00124635,
        00124653,
        00125346,
        00125364,
        00125436,

        00125463,
        00125634,
        00125643,
        00126345,
        00126354,

        00126435,
        00126453,
        00126534,
        00126543,
        00132456,

        00132465,
        00132546,
        00132564,
        00132645,
        00132654,

        00134256,
        00134265,
        00134526,
        00134562,
        00134625,

        00134652,
        00135246,
        00135264,
        00135426,
        00135462,

        00135624,
        00135642,
        00136245,
        00136254,
        00136425,

        00136452,
        00136524,
        00136542,
        00142356,
        00142365,

        00142536,
        00142563,
        00142635,
        00142653,
        00143256,

        00143265,
        00143526,
        00143562,
        00143625,
        00143652,

        00145236,
        00145263,
        00145326,
        00145362,
        00145623,

        00145632,
        00146235,
        00146253,
        00146325,
        00146352,

        00146523,
        00146532,
        00152346,
        00152364,
        00152436,

        00152463,
        00152634,
        00152643,
        00153246,
        00153264,

        00153426,
        00153462,
        00153624,
        00153642,
        00154236,

        00154263,
        00154326,
        00154362,
        00154623,
        00154632,

        00156234,
        00156243,
        00156324,
        00156342,
        00156423,

        00156432,
        00162345,
        00162354,
        00162435,
        00162453,

        00162534,
        00162543,
        00163245,
        00163254,
        00163425,

        00163452,
        00163524,
        00163542,
        00164235,
        00164253,

        00164325,
        00164352,
        00164523,
        00164532,
        00165234,

        00165243,
        00165324,
        00165342,
        00165423,
        00165432,

        00213456,
        00213465,
        00213546,
        00213564,
        00213645,

        00213654,
        00214356,
        00214365,
        00214536,
        00214563,

        00214635,
        00214653,
        00215346,
        00215364,
        00215436,

        00215463,
        00215634,
        00215643,
        00216345,
        00216354,

        00216435,
        00216453,
        00216534,
        00216543,
        00231456,

        00231465,
        00231546,
        00231564,
        00231645,
        00231654,

        00234156,
        00234165,
        00234516,
        00234561,
        00234615,

        00234651,
        00235146,
        00235164,
        00235416,
        00235461,

        00235614,
        00235641,
        00236145,
        00236154,
        00236415,

        00236451,
        00236514,
        00236541,
        00241356,
        00241365,

        00241536,
        00241563,
        00241635,
        00241653,
        00243156,

        00243165,
        00243516,
        00243561,
        00243615,
        00243651,

        00245136,
        00245163,
        00245316,
        00245361,
        00245613,

        00245631,
        00246135,
        00246153,
        00246315,
        00246351,

        00246513,
        00246531,
        00251346,
        00251364,
        00251436,

        00251463,
        00251634,
        00251643,
        00253146,
        00253164,

        00253416,
        00253461,
        00253614,
        00253641,
        00254136,

        00254163,
        00254316,
        00254361,
        00254613,
        00254631,

        00256134,
        00256143,
        00256314,
        00256341,
        00256413,

        00256431,
        00261345,
        00261354,
        00261435,
        00261453,

        00261534,
        00261543,
        00263145,
        00263154,
        00263415,

        00263451,
        00263514,
        00263541,
        00264135,
        00264153,

        00264315,
        00264351,
        00264513,
        00264531,
        00265134,

        00265143,
        00265314,
        00265341,
        00265413,
        00265431,

        00312456,
        00312465,
        00312546,
        00312564,
        00312645,

        00312654,
        00314256,
        00314265,
        00314526,
        00314562,

        00314625,
        00314652,
        00315246,
        00315264,
        00315426,

        00315462,
        00315624,
        00315642,
        00316245,
        00316254,

        00316425,
        00316452,
        00316524,
        00316542,
        00321456,

        00321465,
        00321546,
        00321564,
        00321645,
        00321654,

        00324156,
        00324165,
        00324516,
        00324561,
        00324615,

        00324651,
        00325146,
        00325164,
        00325416,
        00325461,

        00325614,
        00325641,
        00326145,
        00326154,
        00326415,

        00326451,
        00326514,
        00326541,
        00341256,
        00341265,

        00341526,
        00341562,
        00341625,
        00341652,
        00342156,

        00342165,
        00342516,
        00342561,
        00342615,
        00342651,

        00345126,
        00345162,
        00345216,
        00345261,
        00345612,

        00345621,
        00346125,
        00346152,
        00346215,
        00346251,

        00346512,
        00346521,
        00351246,
        00351264,
        00351426,

        00351462,
        00351624,
        00351642,
        00352146,
        00352164,

        00352416,
        00352461,
        00352614,
        00352641,
        00354126,

        00354162,
        00354216,
        00354261,
        00354612,
        00354621,
    };

    for (size_t i = 0; i < std::size(expectedEdgesInts); ++i) {
        uint32_t intEdges = conv.lexIndexEdgesToIntEdges(i);
        ASSERT_EQ(expectedEdgesInts[i], intEdges);
    }
}

TEST(ruCubeStateConverterTest, convertIntCornersToLexIndexCornersPermTest) {
    ruCubeStateConverter conv;

    const std::vector<uint64_t> cornersInts = {
        0101112131415,
        0101112131514,
        0101112141315,
        0101112141513,
        0101112151314,
        0101112151413,
        0101113121415,
        0101113121514,
        0101113141215,
        0101113141512,
        0101113151214,
        0101113151412,
        0101114121315,
        0101114121513,
        0101114131215,
        0101114131512,
        0101114151213,
        0101114151312,
        0101115121314,
        0101115121413,
        0101115131214,
        0101115131412,
        0101115141213,
        0101115141312,
        0101211131415,
        0101211131514,
        0101211141315,
        0101211141513,
        0101211151314,
        0101211151413,
        0101213111415,
        0101213111514,
        0101213141115,
        0101213141511,
        0101213151114,
        0101213151411,
        0101214111315,
        0101214111513,
        0101214131115,
        0101214131511,
        0101214151113,
        0101214151311,
        0101215111314,
        0101215111413,
        0101215131114,
        0101215131411,
        0101215141113,
        0101215141311,
        0101311121415,
        0101311121514,
        0101311141215,
        0101311141512,
        0101311151214,
        0101311151412,
        0101312111415,
        0101312111514,
        0101312141115,
        0101312141511,
        0101312151114,
        0101312151411,
        0101314111215,
        0101314111512,
        0101314121115,
        0101314121511,
        0101314151112,
        0101314151211,
        0101315111214,
        0101315111412,
        0101315121114,
        0101315121411,
        0101315141112,
        0101315141211,
        0101411121315,
        0101411121513,
        0101411131215,
        0101411131512,
        0101411151213,
        0101411151312,
        0101412111315,
        0101412111513,
        0101412131115,
        0101412131511,
        0101412151113,
        0101412151311,
        0101413111215,
        0101413111512,
        0101413121115,
        0101413121511,
        0101413151112,
        0101413151211,
        0101415111213,
        0101415111312,
        0101415121113,
        0101415121311,
        0101415131112,
        0101415131211,
        0101511121314,
        0101511121413,
        0101511131214,
        0101511131412,
        0101511141213,
        0101511141312,
        0101512111314,
        0101512111413,
        0101512131114,
        0101512131411,
        0101512141113,
        0101512141311,
        0101513111214,
        0101513111412,
        0101513121114,
        0101513121411,
        0101513141112,
        0101513141211,
        0101514111213,
        0101514111312,
        0101514121113,
        0101514121311,
        0101514131112,
        0101514131211,
        0111012131415,
        0111012131514,
        0111012141315,
        0111012141513,
        0111012151314,
        0111012151413,
        0111013121415,
        0111013121514,
        0111013141215,
        0111013141512,
        0111013151214,
        0111013151412,
        0111014121315,
        0111014121513,
        0111014131215,
        0111014131512,
        0111014151213,
        0111014151312,
        0111015121314,
        0111015121413,
        0111015131214,
        0111015131412,
        0111015141213,
        0111015141312,
        0111210131415,
        0111210131514,
        0111210141315,
        0111210141513,
        0111210151314,
        0111210151413,
        0111213101415,
        0111213101514,
        0111213141015,
        0111213141510,
        0111213151014,
        0111213151410,
        0111214101315,
        0111214101513,
        0111214131015,
        0111214131510,
        0111214151013,
        0111214151310,
        0111215101314,
        0111215101413,
        0111215131014,
        0111215131410,
        0111215141013,
        0111215141310,
        0111310121415,
        0111310121514,
        0111310141215,
        0111310141512,
        0111310151214,
        0111310151412,
        0111312101415,
        0111312101514,
        0111312141015,
        0111312141510,
        0111312151014,
        0111312151410,
        0111314101215,
        0111314101512,
        0111314121015,
        0111314121510,
        0111314151012,
        0111314151210,
        0111315101214,
        0111315101412,
        0111315121014,
        0111315121410,
        0111315141012,
        0111315141210,
        0111410121315,
        0111410121513,
        0111410131215,
        0111410131512,
        0111410151213,
        0111410151312,
        0111412101315,
        0111412101513,
        0111412131015,
        0111412131510,
        0111412151013,
        0111412151310,
        0111413101215,
        0111413101512,
        0111413121015,
        0111413121510,
        0111413151012,
        0111413151210,
        0111415101213,
        0111415101312,
        0111415121013,
        0111415121310,
        0111415131012,
        0111415131210,
        0111510121314,
        0111510121413,
        0111510131214,
        0111510131412,
        0111510141213,
        0111510141312,
        0111512101314,
        0111512101413,
        0111512131014,
        0111512131410,
        0111512141013,
        0111512141310,
        0111513101214,
        0111513101412,
        0111513121014,
        0111513121410,
        0111513141012,
        0111513141210,
        0111514101213,
        0111514101312,
        0111514121013,
        0111514121310,
        0111514131012,
        0111514131210,
        0121011131415,
        0121011131514,
        0121011141315,
        0121011141513,
        0121011151314,
        0121011151413,
        0121013111415,
        0121013111514,
        0121013141115,
        0121013141511,
        0121013151114,
        0121013151411,
        0121014111315,
        0121014111513,
        0121014131115,
        0121014131511,
        0121014151113,
        0121014151311,
        0121015111314,
        0121015111413,
        0121015131114,
        0121015131411,
        0121015141113,
        0121015141311,
        0121110131415,
        0121110131514,
        0121110141315,
        0121110141513,
        0121110151314,
        0121110151413,
        0121113101415,
        0121113101514,
        0121113141015,
        0121113141510,
        0121113151014,
        0121113151410,
        0121114101315,
        0121114101513,
        0121114131015,
        0121114131510,
        0121114151013,
        0121114151310,
        0121115101314,
        0121115101413,
        0121115131014,
        0121115131410,
        0121115141013,
        0121115141310,
        0121310111415,
        0121310111514,
        0121310141115,
        0121310141511,
        0121310151114,
        0121310151411,
        0121311101415,
        0121311101514,
        0121311141015,
        0121311141510,
        0121311151014,
        0121311151410,
        0121314101115,
        0121314101511,
        0121314111015,
        0121314111510,
        0121314151011,
        0121314151110,
        0121315101114,
        0121315101411,
        0121315111014,
        0121315111410,
        0121315141011,
        0121315141110,
        0121410111315,
        0121410111513,
        0121410131115,
        0121410131511,
        0121410151113,
        0121410151311,
        0121411101315,
        0121411101513,
        0121411131015,
        0121411131510,
        0121411151013,
        0121411151310,
        0121413101115,
        0121413101511,
        0121413111015,
        0121413111510,
        0121413151011,
        0121413151110,
        0121415101113,
        0121415101311,
        0121415111013,
        0121415111310,
        0121415131011,
        0121415131110,
        0121510111314,
        0121510111413,
        0121510131114,
        0121510131411,
        0121510141113,
        0121510141311,
        0121511101314,
        0121511101413,
        0121511131014,
        0121511131410,
        0121511141013,
        0121511141310,
        0121513101114,
        0121513101411,
        0121513111014,
        0121513111410,
        0121513141011,
        0121513141110,
        0121514101113,
        0121514101311,
        0121514111013,
        0121514111310,
        0121514131011,
        0121514131110,
        0131011121415,
        0131011121514,
        0131011141215,
        0131011141512,
        0131011151214,
        0131011151412,
        0131012111415,
        0131012111514,
        0131012141115,
        0131012141511,
        0131012151114,
        0131012151411,
        0131014111215,
        0131014111512,
        0131014121115,
        0131014121511,
        0131014151112,
        0131014151211,
        0131015111214,
        0131015111412,
        0131015121114,
        0131015121411,
        0131015141112,
        0131015141211,
        0131110121415,
        0131110121514,
        0131110141215,
        0131110141512,
        0131110151214,
        0131110151412,
        0131112101415,
        0131112101514,
        0131112141015,
        0131112141510,
        0131112151014,
        0131112151410,
        0131114101215,
        0131114101512,
        0131114121015,
        0131114121510,
        0131114151012,
        0131114151210,
        0131115101214,
        0131115101412,
        0131115121014,
        0131115121410,
        0131115141012,
        0131115141210,
        0131210111415,
        0131210111514,
        0131210141115,
        0131210141511,
        0131210151114,
        0131210151411,
        0131211101415,
        0131211101514,
        0131211141015,
        0131211141510,
        0131211151014,
        0131211151410,
        0131214101115,
        0131214101511,
        0131214111015,
        0131214111510,
        0131214151011,
        0131214151110,
        0131215101114,
        0131215101411,
        0131215111014,
        0131215111410,
        0131215141011,
        0131215141110,
        0131410111215,
        0131410111512,
        0131410121115,
        0131410121511,
        0131410151112,
        0131410151211,
        0131411101215,
        0131411101512,
        0131411121015,
        0131411121510,
        0131411151012,
        0131411151210,
        0131412101115,
        0131412101511,
        0131412111015,
        0131412111510,
        0131412151011,
        0131412151110,
        0131415101112,
        0131415101211,
        0131415111012,
        0131415111210,
        0131415121011,
        0131415121110,
        0131510111214,
        0131510111412,
        0131510121114,
        0131510121411,
        0131510141112,
        0131510141211,
        0131511101214,
        0131511101412,
        0131511121014,
        0131511121410,
        0131511141012,
        0131511141210,
        0131512101114,
        0131512101411,
        0131512111014,
        0131512111410,
        0131512141011,
        0131512141110,
        0131514101112,
        0131514101211,
        0131514111012,
        0131514111210,
        0131514121011,
        0131514121110,
        0141011121315,
        0141011121513,
        0141011131215,
        0141011131512,
        0141011151213,
        0141011151312,
        0141012111315,
        0141012111513,
        0141012131115,
        0141012131511,
        0141012151113,
        0141012151311,
        0141013111215,
        0141013111512,
        0141013121115,
        0141013121511,
        0141013151112,
        0141013151211,
        0141015111213,
        0141015111312,
        0141015121113,
        0141015121311,
        0141015131112,
        0141015131211,
        0141110121315,
        0141110121513,
        0141110131215,
        0141110131512,
        0141110151213,
        0141110151312,
        0141112101315,
        0141112101513,
        0141112131015,
        0141112131510,
        0141112151013,
        0141112151310,
        0141113101215,
        0141113101512,
        0141113121015,
        0141113121510,
        0141113151012,
        0141113151210,
        0141115101213,
        0141115101312,
        0141115121013,
        0141115121310,
        0141115131012,
        0141115131210,
        0141210111315,
        0141210111513,
        0141210131115,
        0141210131511,
        0141210151113,
        0141210151311,
        0141211101315,
        0141211101513,
        0141211131015,
        0141211131510,
        0141211151013,
        0141211151310,
        0141213101115,
        0141213101511,
        0141213111015,
        0141213111510,
        0141213151011,
        0141213151110,
        0141215101113,
        0141215101311,
        0141215111013,
        0141215111310,
        0141215131011,
        0141215131110,
        0141310111215,
        0141310111512,
        0141310121115,
        0141310121511,
        0141310151112,
        0141310151211,
        0141311101215,
        0141311101512,
        0141311121015,
        0141311121510,
        0141311151012,
        0141311151210,
        0141312101115,
        0141312101511,
        0141312111015,
        0141312111510,
        0141312151011,
        0141312151110,
        0141315101112,
        0141315101211,
        0141315111012,
        0141315111210,
        0141315121011,
        0141315121110,
        0141510111213,
        0141510111312,
        0141510121113,
        0141510121311,
        0141510131112,
        0141510131211,
        0141511101213,
        0141511101312,
        0141511121013,
        0141511121310,
        0141511131012,
        0141511131210,
        0141512101113,
        0141512101311,
        0141512111013,
        0141512111310,
        0141512131011,
        0141512131110,
        0141513101112,
        0141513101211,
        0141513111012,
        0141513111210,
        0141513121011,
        0141513121110,
        0151011121314,
        0151011121413,
        0151011131214,
        0151011131412,
        0151011141213,
        0151011141312,
        0151012111314,
        0151012111413,
        0151012131114,
        0151012131411,
        0151012141113,
        0151012141311,
        0151013111214,
        0151013111412,
        0151013121114,
        0151013121411,
        0151013141112,
        0151013141211,
        0151014111213,
        0151014111312,
        0151014121113,
        0151014121311,
        0151014131112,
        0151014131211,
        0151110121314,
        0151110121413,
        0151110131214,
        0151110131412,
        0151110141213,
        0151110141312,
        0151112101314,
        0151112101413,
        0151112131014,
        0151112131410,
        0151112141013,
        0151112141310,
        0151113101214,
        0151113101412,
        0151113121014,
        0151113121410,
        0151113141012,
        0151113141210,
        0151114101213,
        0151114101312,
        0151114121013,
        0151114121310,
        0151114131012,
        0151114131210,
        0151210111314,
        0151210111413,
        0151210131114,
        0151210131411,
        0151210141113,
        0151210141311,
        0151211101314,
        0151211101413,
        0151211131014,
        0151211131410,
        0151211141013,
        0151211141310,
        0151213101114,
        0151213101411,
        0151213111014,
        0151213111410,
        0151213141011,
        0151213141110,
        0151214101113,
        0151214101311,
        0151214111013,
        0151214111310,
        0151214131011,
        0151214131110,
        0151310111214,
        0151310111412,
        0151310121114,
        0151310121411,
        0151310141112,
        0151310141211,
        0151311101214,
        0151311101412,
        0151311121014,
        0151311121410,
        0151311141012,
        0151311141210,
        0151312101114,
        0151312101411,
        0151312111014,
        0151312111410,
        0151312141011,
        0151312141110,
        0151314101112,
        0151314101211,
        0151314111012,
        0151314111210,
        0151314121011,
        0151314121110,
        0151410111213,
        0151410111312,
        0151410121113,
        0151410121311,
        0151410131112,
        0151410131211,
        0151411101213,
        0151411101312,
        0151411121013,
        0151411121310,
        0151411131012,
        0151411131210,
        0151412101113,
        0151412101311,
        0151412111013,
        0151412111310,
        0151412131011,
        0151412131110,
        0151413101112,
        0151413101211,
        0151413111012,
        0151413111210,
        0151413121011,
        0151413121110
    };

    for (size_t i = 0; i < std::size(cornersInts); ++i) {
        uint16_t cornersLexIndex = conv.intCornersToLexIndexCornersPerm(cornersInts[i]);
        ASSERT_EQ(i, cornersLexIndex);
    }
}

TEST(ruCubeStateConverterTest, convertIntCornersToLexIndexCornersPermAndBackTest) {
    ruCubeStateConverter conv;

    const std::vector<uint64_t> cornersInts = {
        0101112131415,
        0101112131514,
        0101112141315,
        0101112141513,
        0101112151314,
        0101112151413,
        0101113121415,
        0101113121514,
        0101113141215,
        0101113141512,
        0101113151214,
        0101113151412,
        0101114121315,
        0101114121513,
        0101114131215,
        0101114131512,
        0101114151213,
        0101114151312,
        0101115121314,
        0101115121413,
        0101115131214,
        0101115131412,
        0101115141213,
        0101115141312,
        0101211131415,
        0101211131514,
        0101211141315,
        0101211141513,
        0101211151314,
        0101211151413,
        0101213111415,
        0101213111514,
        0101213141115,
        0101213141511,
        0101213151114,
        0101213151411,
        0101214111315,
        0101214111513,
        0101214131115,
        0101214131511,
        0101214151113,
        0101214151311,
        0101215111314,
        0101215111413,
        0101215131114,
        0101215131411,
        0101215141113,
        0101215141311,
        0101311121415,
        0101311121514,
        0101311141215,
        0101311141512,
        0101311151214,
        0101311151412,
        0101312111415,
        0101312111514,
        0101312141115,
        0101312141511,
        0101312151114,
        0101312151411,
        0101314111215,
        0101314111512,
        0101314121115,
        0101314121511,
        0101314151112,
        0101314151211,
        0101315111214,
        0101315111412,
        0101315121114,
        0101315121411,
        0101315141112,
        0101315141211,
        0101411121315,
        0101411121513,
        0101411131215,
        0101411131512,
        0101411151213,
        0101411151312,
        0101412111315,
        0101412111513,
        0101412131115,
        0101412131511,
        0101412151113,
        0101412151311,
        0101413111215,
        0101413111512,
        0101413121115,
        0101413121511,
        0101413151112,
        0101413151211,
        0101415111213,
        0101415111312,
        0101415121113,
        0101415121311,
        0101415131112,
        0101415131211,
        0101511121314,
        0101511121413,
        0101511131214,
        0101511131412,
        0101511141213,
        0101511141312,
        0101512111314,
        0101512111413,
        0101512131114,
        0101512131411,
        0101512141113,
        0101512141311,
        0101513111214,
        0101513111412,
        0101513121114,
        0101513121411,
        0101513141112,
        0101513141211,
        0101514111213,
        0101514111312,
        0101514121113,
        0101514121311,
        0101514131112,
        0101514131211,
        0111012131415,
        0111012131514,
        0111012141315,
        0111012141513,
        0111012151314,
        0111012151413,
        0111013121415,
        0111013121514,
        0111013141215,
        0111013141512,
        0111013151214,
        0111013151412,
        0111014121315,
        0111014121513,
        0111014131215,
        0111014131512,
        0111014151213,
        0111014151312,
        0111015121314,
        0111015121413,
        0111015131214,
        0111015131412,
        0111015141213,
        0111015141312,
        0111210131415,
        0111210131514,
        0111210141315,
        0111210141513,
        0111210151314,
        0111210151413,
        0111213101415,
        0111213101514,
        0111213141015,
        0111213141510,
        0111213151014,
        0111213151410,
        0111214101315,
        0111214101513,
        0111214131015,
        0111214131510,
        0111214151013,
        0111214151310,
        0111215101314,
        0111215101413,
        0111215131014,
        0111215131410,
        0111215141013,
        0111215141310,
        0111310121415,
        0111310121514,
        0111310141215,
        0111310141512,
        0111310151214,
        0111310151412,
        0111312101415,
        0111312101514,
        0111312141015,
        0111312141510,
        0111312151014,
        0111312151410,
        0111314101215,
        0111314101512,
        0111314121015,
        0111314121510,
        0111314151012,
        0111314151210,
        0111315101214,
        0111315101412,
        0111315121014,
        0111315121410,
        0111315141012,
        0111315141210,
        0111410121315,
        0111410121513,
        0111410131215,
        0111410131512,
        0111410151213,
        0111410151312,
        0111412101315,
        0111412101513,
        0111412131015,
        0111412131510,
        0111412151013,
        0111412151310,
        0111413101215,
        0111413101512,
        0111413121015,
        0111413121510,
        0111413151012,
        0111413151210,
        0111415101213,
        0111415101312,
        0111415121013,
        0111415121310,
        0111415131012,
        0111415131210,
        0111510121314,
        0111510121413,
        0111510131214,
        0111510131412,
        0111510141213,
        0111510141312,
        0111512101314,
        0111512101413,
        0111512131014,
        0111512131410,
        0111512141013,
        0111512141310,
        0111513101214,
        0111513101412,
        0111513121014,
        0111513121410,
        0111513141012,
        0111513141210,
        0111514101213,
        0111514101312,
        0111514121013,
        0111514121310,
        0111514131012,
        0111514131210,
        0121011131415,
        0121011131514,
        0121011141315,
        0121011141513,
        0121011151314,
        0121011151413,
        0121013111415,
        0121013111514,
        0121013141115,
        0121013141511,
        0121013151114,
        0121013151411,
        0121014111315,
        0121014111513,
        0121014131115,
        0121014131511,
        0121014151113,
        0121014151311,
        0121015111314,
        0121015111413,
        0121015131114,
        0121015131411,
        0121015141113,
        0121015141311,
        0121110131415,
        0121110131514,
        0121110141315,
        0121110141513,
        0121110151314,
        0121110151413,
        0121113101415,
        0121113101514,
        0121113141015,
        0121113141510,
        0121113151014,
        0121113151410,
        0121114101315,
        0121114101513,
        0121114131015,
        0121114131510,
        0121114151013,
        0121114151310,
        0121115101314,
        0121115101413,
        0121115131014,
        0121115131410,
        0121115141013,
        0121115141310,
        0121310111415,
        0121310111514,
        0121310141115,
        0121310141511,
        0121310151114,
        0121310151411,
        0121311101415,
        0121311101514,
        0121311141015,
        0121311141510,
        0121311151014,
        0121311151410,
        0121314101115,
        0121314101511,
        0121314111015,
        0121314111510,
        0121314151011,
        0121314151110,
        0121315101114,
        0121315101411,
        0121315111014,
        0121315111410,
        0121315141011,
        0121315141110,
        0121410111315,
        0121410111513,
        0121410131115,
        0121410131511,
        0121410151113,
        0121410151311,
        0121411101315,
        0121411101513,
        0121411131015,
        0121411131510,
        0121411151013,
        0121411151310,
        0121413101115,
        0121413101511,
        0121413111015,
        0121413111510,
        0121413151011,
        0121413151110,
        0121415101113,
        0121415101311,
        0121415111013,
        0121415111310,
        0121415131011,
        0121415131110,
        0121510111314,
        0121510111413,
        0121510131114,
        0121510131411,
        0121510141113,
        0121510141311,
        0121511101314,
        0121511101413,
        0121511131014,
        0121511131410,
        0121511141013,
        0121511141310,
        0121513101114,
        0121513101411,
        0121513111014,
        0121513111410,
        0121513141011,
        0121513141110,
        0121514101113,
        0121514101311,
        0121514111013,
        0121514111310,
        0121514131011,
        0121514131110,
        0131011121415,
        0131011121514,
        0131011141215,
        0131011141512,
        0131011151214,
        0131011151412,
        0131012111415,
        0131012111514,
        0131012141115,
        0131012141511,
        0131012151114,
        0131012151411,
        0131014111215,
        0131014111512,
        0131014121115,
        0131014121511,
        0131014151112,
        0131014151211,
        0131015111214,
        0131015111412,
        0131015121114,
        0131015121411,
        0131015141112,
        0131015141211,
        0131110121415,
        0131110121514,
        0131110141215,
        0131110141512,
        0131110151214,
        0131110151412,
        0131112101415,
        0131112101514,
        0131112141015,
        0131112141510,
        0131112151014,
        0131112151410,
        0131114101215,
        0131114101512,
        0131114121015,
        0131114121510,
        0131114151012,
        0131114151210,
        0131115101214,
        0131115101412,
        0131115121014,
        0131115121410,
        0131115141012,
        0131115141210,
        0131210111415,
        0131210111514,
        0131210141115,
        0131210141511,
        0131210151114,
        0131210151411,
        0131211101415,
        0131211101514,
        0131211141015,
        0131211141510,
        0131211151014,
        0131211151410,
        0131214101115,
        0131214101511,
        0131214111015,
        0131214111510,
        0131214151011,
        0131214151110,
        0131215101114,
        0131215101411,
        0131215111014,
        0131215111410,
        0131215141011,
        0131215141110,
        0131410111215,
        0131410111512,
        0131410121115,
        0131410121511,
        0131410151112,
        0131410151211,
        0131411101215,
        0131411101512,
        0131411121015,
        0131411121510,
        0131411151012,
        0131411151210,
        0131412101115,
        0131412101511,
        0131412111015,
        0131412111510,
        0131412151011,
        0131412151110,
        0131415101112,
        0131415101211,
        0131415111012,
        0131415111210,
        0131415121011,
        0131415121110,
        0131510111214,
        0131510111412,
        0131510121114,
        0131510121411,
        0131510141112,
        0131510141211,
        0131511101214,
        0131511101412,
        0131511121014,
        0131511121410,
        0131511141012,
        0131511141210,
        0131512101114,
        0131512101411,
        0131512111014,
        0131512111410,
        0131512141011,
        0131512141110,
        0131514101112,
        0131514101211,
        0131514111012,
        0131514111210,
        0131514121011,
        0131514121110,
        0141011121315,
        0141011121513,
        0141011131215,
        0141011131512,
        0141011151213,
        0141011151312,
        0141012111315,
        0141012111513,
        0141012131115,
        0141012131511,
        0141012151113,
        0141012151311,
        0141013111215,
        0141013111512,
        0141013121115,
        0141013121511,
        0141013151112,
        0141013151211,
        0141015111213,
        0141015111312,
        0141015121113,
        0141015121311,
        0141015131112,
        0141015131211,
        0141110121315,
        0141110121513,
        0141110131215,
        0141110131512,
        0141110151213,
        0141110151312,
        0141112101315,
        0141112101513,
        0141112131015,
        0141112131510,
        0141112151013,
        0141112151310,
        0141113101215,
        0141113101512,
        0141113121015,
        0141113121510,
        0141113151012,
        0141113151210,
        0141115101213,
        0141115101312,
        0141115121013,
        0141115121310,
        0141115131012,
        0141115131210,
        0141210111315,
        0141210111513,
        0141210131115,
        0141210131511,
        0141210151113,
        0141210151311,
        0141211101315,
        0141211101513,
        0141211131015,
        0141211131510,
        0141211151013,
        0141211151310,
        0141213101115,
        0141213101511,
        0141213111015,
        0141213111510,
        0141213151011,
        0141213151110,
        0141215101113,
        0141215101311,
        0141215111013,
        0141215111310,
        0141215131011,
        0141215131110,
        0141310111215,
        0141310111512,
        0141310121115,
        0141310121511,
        0141310151112,
        0141310151211,
        0141311101215,
        0141311101512,
        0141311121015,
        0141311121510,
        0141311151012,
        0141311151210,
        0141312101115,
        0141312101511,
        0141312111015,
        0141312111510,
        0141312151011,
        0141312151110,
        0141315101112,
        0141315101211,
        0141315111012,
        0141315111210,
        0141315121011,
        0141315121110,
        0141510111213,
        0141510111312,
        0141510121113,
        0141510121311,
        0141510131112,
        0141510131211,
        0141511101213,
        0141511101312,
        0141511121013,
        0141511121310,
        0141511131012,
        0141511131210,
        0141512101113,
        0141512101311,
        0141512111013,
        0141512111310,
        0141512131011,
        0141512131110,
        0141513101112,
        0141513101211,
        0141513111012,
        0141513111210,
        0141513121011,
        0141513121110,
        0151011121314,
        0151011121413,
        0151011131214,
        0151011131412,
        0151011141213,
        0151011141312,
        0151012111314,
        0151012111413,
        0151012131114,
        0151012131411,
        0151012141113,
        0151012141311,
        0151013111214,
        0151013111412,
        0151013121114,
        0151013121411,
        0151013141112,
        0151013141211,
        0151014111213,
        0151014111312,
        0151014121113,
        0151014121311,
        0151014131112,
        0151014131211,
        0151110121314,
        0151110121413,
        0151110131214,
        0151110131412,
        0151110141213,
        0151110141312,
        0151112101314,
        0151112101413,
        0151112131014,
        0151112131410,
        0151112141013,
        0151112141310,
        0151113101214,
        0151113101412,
        0151113121014,
        0151113121410,
        0151113141012,
        0151113141210,
        0151114101213,
        0151114101312,
        0151114121013,
        0151114121310,
        0151114131012,
        0151114131210,
        0151210111314,
        0151210111413,
        0151210131114,
        0151210131411,
        0151210141113,
        0151210141311,
        0151211101314,
        0151211101413,
        0151211131014,
        0151211131410,
        0151211141013,
        0151211141310,
        0151213101114,
        0151213101411,
        0151213111014,
        0151213111410,
        0151213141011,
        0151213141110,
        0151214101113,
        0151214101311,
        0151214111013,
        0151214111310,
        0151214131011,
        0151214131110,
        0151310111214,
        0151310111412,
        0151310121114,
        0151310121411,
        0151310141112,
        0151310141211,
        0151311101214,
        0151311101412,
        0151311121014,
        0151311121410,
        0151311141012,
        0151311141210,
        0151312101114,
        0151312101411,
        0151312111014,
        0151312111410,
        0151312141011,
        0151312141110,
        0151314101112,
        0151314101211,
        0151314111012,
        0151314111210,
        0151314121011,
        0151314121110,
        0151410111213,
        0151410111312,
        0151410121113,
        0151410121311,
        0151410131112,
        0151410131211,
        0151411101213,
        0151411101312,
        0151411121013,
        0151411121310,
        0151411131012,
        0151411131210,
        0151412101113,
        0151412101311,
        0151412111013,
        0151412111310,
        0151412131011,
        0151412131110,
        0151413101112,
        0151413101211,
        0151413111012,
        0151413111210,
        0151413121011,
        0151413121110
    };

    for (size_t i = 0; i < std::size(cornersInts); ++i) {
        uint16_t cornersLexIndex = conv.intCornersToLexIndexCornersPerm(cornersInts[i]);
        ASSERT_EQ(i, cornersLexIndex);
        uint64_t cornersPermInt = conv.lexIndexCornersToIntCorners(ruLutCube::solvedLexIndexCornersOrient, cornersLexIndex);
        ASSERT_EQ(cornersInts[i], cornersPermInt);
    }
}

TEST(ruCubeStateConverterTest, convertIntCornersToLexIndexCornersPermTurnTest) {
    ruCubeStateConverter conv;
    ruCube cube;

    const std::vector<uint16_t> expectedLexIndexCornersPerms = {
        630,    // 5 1 2 0 3 4
        514,    // 4 1 2 5 0 3
        393,    // 3 1 2 4 5 0

        360,    // 3 0 1 2 4 5
        288,    // 2 3 0 1 4 5
        150     // 1 2 3 0 4 5
    };

    for (uint8_t t = R; t <= Ui; ++t) {
        cube.turn(t);
        auto cornersInt = cube.getCorners();
        cube.inverseTurn(t);
        ASSERT_EQ(expectedLexIndexCornersPerms[t], conv.intCornersToLexIndexCornersPerm(cornersInt));
    }
}

TEST(ruCubeStateConverterTest, convertIntCornersToLexIndexCornersOrientTest) {
    ruCubeStateConverter conv;

    const std::vector<uint64_t> cornersInts = {
        0101112131415,
        0202122232425,
        0102112231425,
        0404142434445,

        0401142134415,
        0402142234425,
        0452443224120,
        0451443124110,

        0452443221110,
        0422443211510,
        0402423112225,
    };

    const std::vector<uint16_t> cornersOrientsExpected = {
        0,
        364,
        91,
        728,

        546,
        637,
        637,
        546,

        630,
        630,
        598
    };

    for (size_t i = 0; i < std::size(cornersInts); ++i) {
        uint16_t cornersLexIndex = conv.intCornersToLexIndexCornersOrient(cornersInts[i]);
        ASSERT_EQ(cornersOrientsExpected[i], cornersLexIndex);
    }
}

TEST(ruCubeStateConverterTest, convertLexIndexCornersToIntCornersTest) {
    ruCubeStateConverter conv;

    const std::vector<uint16_t> lexIndexCornersPerms = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    };

    const std::vector<uint16_t> lexIndexCornersOrients = {
        0,
        364,
        91,
        728,

        546,
        637,
        637,
        546,

        630,
        630,
        598
    };

    const std::vector<uint64_t> expectedCornersInts = {
        0101112131415,
        0202122232524,
        0102112241325,
        0404142444543,

        0401142154314,
        0402142254423,
        0402143224425,
        0401143124514,

        0402143241215,
        0402143241512,
        0402123152224,
    };

    for (size_t i = 0; i < std::size(expectedCornersInts); ++i) {
        uint64_t cornersInt = conv.lexIndexCornersToIntCorners(lexIndexCornersOrients[i], lexIndexCornersPerms[i]);
        ASSERT_EQ(expectedCornersInts[i], cornersInt);
    }
}

TEST(ruCubeStateConverterTest, convertVectCornersOrientToLexIndexCornersOrientTest) {
    ruCubeStateConverter conv;
    const std::vector<cornersArray> cornersOrient = {
        { 0, 0, 0, 0, 0, 0 },
        { 1, 1, 1, 1, 1, 1 },
        { 0, 1, 0, 1, 0, 1 },
        { 2, 2, 2, 2, 2, 2 },
        { 2, 0, 2, 0, 2, 0 },
        { 2, 1, 2, 1, 2, 1 },
        { 2, 1, 2, 1, 2, 1 },
        { 2, 0, 2, 0, 2, 0 },
        { 2, 1, 2, 1, 0, 0 },
        { 2, 1, 2, 1, 2, 2 },
        { 2, 1, 1, 0, 1, 1 },
    };

    const std::vector<uint16_t> expectedLexIndexCornersOrients = {
        0,
        364,
        91,
        728,
        546,
        637,
        637,
        546,
        630,
        638,
        598
    };

    for (size_t i = 0; i < std::size(cornersOrient); ++i) {
        auto lexIndexCornersOrient = conv.vectCornersOrientToLexIndexCornersOrient(cornersOrient[i]);
        ASSERT_EQ(expectedLexIndexCornersOrients[i], lexIndexCornersOrient);
    }
}

TEST(ruCubeStateConverterTest, convertVectCornersPermToLexIndexCornersPermTest) {
    ruCubeStateConverter conv;
    const std::vector<cornersArray> cornersPerm = {
        { 0, 1, 2, 3, 4, 5 },
        { 0, 1, 2, 3, 5, 4 },
        { 0, 1, 2, 4, 3, 5 },
        { 0, 1, 2, 4, 5, 3 },
        { 0, 1, 2, 5, 3, 4 },
        { 0, 1, 2, 5, 4, 3 },
        { 0, 1, 3, 2, 4, 5 },
        { 0, 1, 3, 2, 5, 4 },
        { 0, 1, 3, 4, 2, 5 },
        { 0, 1, 3, 4, 5, 2 },
        { 0, 1, 3, 5, 2, 4 },
        { 0, 1, 3, 5, 4, 2 },
        { 0, 1, 4, 2, 3, 5 },
        { 0, 1, 4, 2, 5, 3 },
        { 0, 1, 4, 3, 2, 5 },
        { 0, 1, 4, 3, 5, 2 },
        { 0, 1, 4, 5, 2, 3 },
        { 0, 1, 4, 5, 3, 2 },
        { 0, 1, 5, 2, 3, 4 },
        { 0, 1, 5, 2, 4, 3 },
        { 0, 1, 5, 3, 2, 4 },
        { 0, 1, 5, 3, 4, 2 },
        { 0, 1, 5, 4, 2, 3 },
        { 0, 1, 5, 4, 3, 2 },
        { 0, 2, 1, 3, 4, 5 },
        { 0, 2, 1, 3, 5, 4 },
        { 0, 2, 1, 4, 3, 5 },
        { 0, 2, 1, 4, 5, 3 },
        { 0, 2, 1, 5, 3, 4 },
        { 0, 2, 1, 5, 4, 3 },
        { 0, 2, 3, 1, 4, 5 },
        { 0, 2, 3, 1, 5, 4 },
        { 0, 2, 3, 4, 1, 5 },
        { 0, 2, 3, 4, 5, 1 },
        { 0, 2, 3, 5, 1, 4 },
        { 0, 2, 3, 5, 4, 1 },
        { 0, 2, 4, 1, 3, 5 },
        { 0, 2, 4, 1, 5, 3 },
        { 0, 2, 4, 3, 1, 5 },
        { 0, 2, 4, 3, 5, 1 },
        { 0, 2, 4, 5, 1, 3 },
        { 0, 2, 4, 5, 3, 1 },
        { 0, 2, 5, 1, 3, 4 },
        { 0, 2, 5, 1, 4, 3 },
        { 0, 2, 5, 3, 1, 4 },
        { 0, 2, 5, 3, 4, 1 },
        { 0, 2, 5, 4, 1, 3 },
        { 0, 2, 5, 4, 3, 1 },
        { 0, 3, 1, 2, 4, 5 },
        { 0, 3, 1, 2, 5, 4 },
        { 0, 3, 1, 4, 2, 5 },
        { 0, 3, 1, 4, 5, 2 },
        { 0, 3, 1, 5, 2, 4 },
        { 0, 3, 1, 5, 4, 2 },
        { 0, 3, 2, 1, 4, 5 },
        { 0, 3, 2, 1, 5, 4 },
        { 0, 3, 2, 4, 1, 5 },
        { 0, 3, 2, 4, 5, 1 },
        { 0, 3, 2, 5, 1, 4 },
        { 0, 3, 2, 5, 4, 1 },
        { 0, 3, 4, 1, 2, 5 },
        { 0, 3, 4, 1, 5, 2 },
        { 0, 3, 4, 2, 1, 5 },
        { 0, 3, 4, 2, 5, 1 },
        { 0, 3, 4, 5, 1, 2 },
        { 0, 3, 4, 5, 2, 1 },
        { 0, 3, 5, 1, 2, 4 },
        { 0, 3, 5, 1, 4, 2 },
        { 0, 3, 5, 2, 1, 4 },
        { 0, 3, 5, 2, 4, 1 },
        { 0, 3, 5, 4, 1, 2 },
        { 0, 3, 5, 4, 2, 1 },
        { 0, 4, 1, 2, 3, 5 },
        { 0, 4, 1, 2, 5, 3 },
        { 0, 4, 1, 3, 2, 5 },
        { 0, 4, 1, 3, 5, 2 },
        { 0, 4, 1, 5, 2, 3 },
        { 0, 4, 1, 5, 3, 2 },
        { 0, 4, 2, 1, 3, 5 },
        { 0, 4, 2, 1, 5, 3 },
        { 0, 4, 2, 3, 1, 5 },
        { 0, 4, 2, 3, 5, 1 },
        { 0, 4, 2, 5, 1, 3 },
        { 0, 4, 2, 5, 3, 1 },
        { 0, 4, 3, 1, 2, 5 },
        { 0, 4, 3, 1, 5, 2 },
        { 0, 4, 3, 2, 1, 5 },
        { 0, 4, 3, 2, 5, 1 },
        { 0, 4, 3, 5, 1, 2 },
        { 0, 4, 3, 5, 2, 1 },
        { 0, 4, 5, 1, 2, 3 },
        { 0, 4, 5, 1, 3, 2 },
        { 0, 4, 5, 2, 1, 3 },
        { 0, 4, 5, 2, 3, 1 },
        { 0, 4, 5, 3, 1, 2 },
        { 0, 4, 5, 3, 2, 1 },
        { 0, 5, 1, 2, 3, 4 },
        { 0, 5, 1, 2, 4, 3 },
        { 0, 5, 1, 3, 2, 4 },
        { 0, 5, 1, 3, 4, 2 },
        { 0, 5, 1, 4, 2, 3 },
        { 0, 5, 1, 4, 3, 2 },
        { 0, 5, 2, 1, 3, 4 },
        { 0, 5, 2, 1, 4, 3 },
        { 0, 5, 2, 3, 1, 4 },
        { 0, 5, 2, 3, 4, 1 },
        { 0, 5, 2, 4, 1, 3 },
        { 0, 5, 2, 4, 3, 1 },
        { 0, 5, 3, 1, 2, 4 },
        { 0, 5, 3, 1, 4, 2 },
        { 0, 5, 3, 2, 1, 4 },
        { 0, 5, 3, 2, 4, 1 },
        { 0, 5, 3, 4, 1, 2 },
        { 0, 5, 3, 4, 2, 1 },
        { 0, 5, 4, 1, 2, 3 },
        { 0, 5, 4, 1, 3, 2 },
        { 0, 5, 4, 2, 1, 3 },
        { 0, 5, 4, 2, 3, 1 },
        { 0, 5, 4, 3, 1, 2 },
        { 0, 5, 4, 3, 2, 1 },
        { 1, 0, 2, 3, 4, 5 },
        { 1, 0, 2, 3, 5, 4 },
        { 1, 0, 2, 4, 3, 5 },
        { 1, 0, 2, 4, 5, 3 },
        { 1, 0, 2, 5, 3, 4 },
        { 1, 0, 2, 5, 4, 3 },
        { 1, 0, 3, 2, 4, 5 },
        { 1, 0, 3, 2, 5, 4 },
        { 1, 0, 3, 4, 2, 5 },
        { 1, 0, 3, 4, 5, 2 },
        { 1, 0, 3, 5, 2, 4 },
        { 1, 0, 3, 5, 4, 2 },
        { 1, 0, 4, 2, 3, 5 },
        { 1, 0, 4, 2, 5, 3 },
        { 1, 0, 4, 3, 2, 5 },
        { 1, 0, 4, 3, 5, 2 },
        { 1, 0, 4, 5, 2, 3 },
        { 1, 0, 4, 5, 3, 2 },
        { 1, 0, 5, 2, 3, 4 },
        { 1, 0, 5, 2, 4, 3 },
        { 1, 0, 5, 3, 2, 4 },
        { 1, 0, 5, 3, 4, 2 },
        { 1, 0, 5, 4, 2, 3 },
        { 1, 0, 5, 4, 3, 2 },
        { 1, 2, 0, 3, 4, 5 },
        { 1, 2, 0, 3, 5, 4 },
        { 1, 2, 0, 4, 3, 5 },
        { 1, 2, 0, 4, 5, 3 },
        { 1, 2, 0, 5, 3, 4 },
        { 1, 2, 0, 5, 4, 3 },
        { 1, 2, 3, 0, 4, 5 },
        { 1, 2, 3, 0, 5, 4 },
        { 1, 2, 3, 4, 0, 5 },
        { 1, 2, 3, 4, 5, 0 },
        { 1, 2, 3, 5, 0, 4 },
        { 1, 2, 3, 5, 4, 0 },
        { 1, 2, 4, 0, 3, 5 },
        { 1, 2, 4, 0, 5, 3 },
        { 1, 2, 4, 3, 0, 5 },
        { 1, 2, 4, 3, 5, 0 },
        { 1, 2, 4, 5, 0, 3 },
        { 1, 2, 4, 5, 3, 0 },
        { 1, 2, 5, 0, 3, 4 },
        { 1, 2, 5, 0, 4, 3 },
        { 1, 2, 5, 3, 0, 4 },
        { 1, 2, 5, 3, 4, 0 },
        { 1, 2, 5, 4, 0, 3 },
        { 1, 2, 5, 4, 3, 0 },
        { 1, 3, 0, 2, 4, 5 },
        { 1, 3, 0, 2, 5, 4 },
        { 1, 3, 0, 4, 2, 5 },
        { 1, 3, 0, 4, 5, 2 },
        { 1, 3, 0, 5, 2, 4 },
        { 1, 3, 0, 5, 4, 2 },
        { 1, 3, 2, 0, 4, 5 },
        { 1, 3, 2, 0, 5, 4 },
        { 1, 3, 2, 4, 0, 5 },
        { 1, 3, 2, 4, 5, 0 },
        { 1, 3, 2, 5, 0, 4 },
        { 1, 3, 2, 5, 4, 0 },
        { 1, 3, 4, 0, 2, 5 },
        { 1, 3, 4, 0, 5, 2 },
        { 1, 3, 4, 2, 0, 5 }
    };

    for (size_t i = 0; i < std::size(cornersPerm); ++i) {
        auto lexIndexCornersPerm = conv.vectCornersPermToLexIndexCornersPerm(cornersPerm[i]);
        ASSERT_EQ(i, lexIndexCornersPerm);
    }
}

TEST(ruCubeStateConverterTest, convertVectEdgesPermToLexIndexEdgesPermTest) {
    ruCubeStateConverter conv;
    const std::vector<edgesArray> edgesPerm = {
        { 0, 1, 2, 3, 4, 5, 6 },
        { 0, 1, 2, 3, 4, 6, 5 },
        { 0, 1, 2, 3, 5, 4, 6 },
        { 0, 1, 2, 3, 5, 6, 4 },
        { 0, 1, 2, 3, 6, 4, 5 },
        { 0, 1, 2, 3, 6, 5, 4 },
        { 0, 1, 2, 4, 3, 5, 6 },
        { 0, 1, 2, 4, 3, 6, 5 },
        { 0, 1, 2, 4, 5, 3, 6 },
        { 0, 1, 2, 4, 5, 6, 3 },
        { 0, 1, 2, 4, 6, 3, 5 },
        { 0, 1, 2, 4, 6, 5, 3 },
        { 0, 1, 2, 5, 3, 4, 6 },
        { 0, 1, 2, 5, 3, 6, 4 },
        { 0, 1, 2, 5, 4, 3, 6 },
        { 0, 1, 2, 5, 4, 6, 3 },
        { 0, 1, 2, 5, 6, 3, 4 },
        { 0, 1, 2, 5, 6, 4, 3 },
        { 0, 1, 2, 6, 3, 4, 5 },
        { 0, 1, 2, 6, 3, 5, 4 },
        { 0, 1, 2, 6, 4, 3, 5 },
        { 0, 1, 2, 6, 4, 5, 3 },
        { 0, 1, 2, 6, 5, 3, 4 },
        { 0, 1, 2, 6, 5, 4, 3 },
        { 0, 1, 3, 2, 4, 5, 6 },
        { 0, 1, 3, 2, 4, 6, 5 },
        { 0, 1, 3, 2, 5, 4, 6 },
        { 0, 1, 3, 2, 5, 6, 4 },
        { 0, 1, 3, 2, 6, 4, 5 },
        { 0, 1, 3, 2, 6, 5, 4 },
        { 0, 1, 3, 4, 2, 5, 6 },
        { 0, 1, 3, 4, 2, 6, 5 },
        { 0, 1, 3, 4, 5, 2, 6 },
        { 0, 1, 3, 4, 5, 6, 2 },
        { 0, 1, 3, 4, 6, 2, 5 },
        { 0, 1, 3, 4, 6, 5, 2 },
        { 0, 1, 3, 5, 2, 4, 6 },
        { 0, 1, 3, 5, 2, 6, 4 },
        { 0, 1, 3, 5, 4, 2, 6 },
        { 0, 1, 3, 5, 4, 6, 2 },
        { 0, 1, 3, 5, 6, 2, 4 },
        { 0, 1, 3, 5, 6, 4, 2 },
        { 0, 1, 3, 6, 2, 4, 5 },
        { 0, 1, 3, 6, 2, 5, 4 },
        { 0, 1, 3, 6, 4, 2, 5 },
        { 0, 1, 3, 6, 4, 5, 2 },
        { 0, 1, 3, 6, 5, 2, 4 },
        { 0, 1, 3, 6, 5, 4, 2 },
        { 0, 1, 4, 2, 3, 5, 6 },
        { 0, 1, 4, 2, 3, 6, 5 },
        { 0, 1, 4, 2, 5, 3, 6 },
        { 0, 1, 4, 2, 5, 6, 3 },
        { 0, 1, 4, 2, 6, 3, 5 },
        { 0, 1, 4, 2, 6, 5, 3 },
        { 0, 1, 4, 3, 2, 5, 6 },
        { 0, 1, 4, 3, 2, 6, 5 },
        { 0, 1, 4, 3, 5, 2, 6 },
        { 0, 1, 4, 3, 5, 6, 2 },
        { 0, 1, 4, 3, 6, 2, 5 },
        { 0, 1, 4, 3, 6, 5, 2 },
        { 0, 1, 4, 5, 2, 3, 6 },
        { 0, 1, 4, 5, 2, 6, 3 },
        { 0, 1, 4, 5, 3, 2, 6 },
        { 0, 1, 4, 5, 3, 6, 2 },
        { 0, 1, 4, 5, 6, 2, 3 },
        { 0, 1, 4, 5, 6, 3, 2 },
        { 0, 1, 4, 6, 2, 3, 5 },
        { 0, 1, 4, 6, 2, 5, 3 },
        { 0, 1, 4, 6, 3, 2, 5 },
        { 0, 1, 4, 6, 3, 5, 2 },
        { 0, 1, 4, 6, 5, 2, 3 },
        { 0, 1, 4, 6, 5, 3, 2 },
        { 0, 1, 5, 2, 3, 4, 6 },
        { 0, 1, 5, 2, 3, 6, 4 },
        { 0, 1, 5, 2, 4, 3, 6 },
        { 0, 1, 5, 2, 4, 6, 3 },
        { 0, 1, 5, 2, 6, 3, 4 },
        { 0, 1, 5, 2, 6, 4, 3 },
        { 0, 1, 5, 3, 2, 4, 6 },
        { 0, 1, 5, 3, 2, 6, 4 },
        { 0, 1, 5, 3, 4, 2, 6 },
        { 0, 1, 5, 3, 4, 6, 2 },
        { 0, 1, 5, 3, 6, 2, 4 },
        { 0, 1, 5, 3, 6, 4, 2 },
        { 0, 1, 5, 4, 2, 3, 6 },
        { 0, 1, 5, 4, 2, 6, 3 },
        { 0, 1, 5, 4, 3, 2, 6 },
        { 0, 1, 5, 4, 3, 6, 2 },
        { 0, 1, 5, 4, 6, 2, 3 },
        { 0, 1, 5, 4, 6, 3, 2 },
        { 0, 1, 5, 6, 2, 3, 4 },
        { 0, 1, 5, 6, 2, 4, 3 },
        { 0, 1, 5, 6, 3, 2, 4 },
        { 0, 1, 5, 6, 3, 4, 2 },
        { 0, 1, 5, 6, 4, 2, 3 },
        { 0, 1, 5, 6, 4, 3, 2 },
        { 0, 1, 6, 2, 3, 4, 5 },
        { 0, 1, 6, 2, 3, 5, 4 },
        { 0, 1, 6, 2, 4, 3, 5 },
        { 0, 1, 6, 2, 4, 5, 3 },
        { 0, 1, 6, 2, 5, 3, 4 },
        { 0, 1, 6, 2, 5, 4, 3 },
        { 0, 1, 6, 3, 2, 4, 5 },
        { 0, 1, 6, 3, 2, 5, 4 },
        { 0, 1, 6, 3, 4, 2, 5 }
    };

    for (size_t i = 0; i < std::size(edgesPerm); ++i) {
        auto lexIndexEdgesPerm = conv.vectEdgesPermToLexIndexEdgesPerm(edgesPerm[i]);
        ASSERT_EQ(i, lexIndexEdgesPerm);
    }
}

TEST(ruCubeStateConverterTest, convertLexIndexEdgesToIntEdgesAsStrWithIgnoredTest) {
    ruCubeStateConverter conv;

    const std::vector<std::pair<uint16_t, std::bitset<ruBaseCube::noOfEdges>>> lexIndexEdges {
        { 0,  0b0000000 },
        { 1,  0b0000000 },
        { 2,  0b0000000 } ,
        { 3,  0b0000000 },
        { 4,  0b0000000 },

        { 5,  0b1111111 },
        { 6,  0b0000001 },
        { 7,  0b0000010 },
        { 8,  0b0000100 },
        { 9,  0b0001000 },

        { 10, 0b0010000 },
        { 11, 0b0100000 },
        { 12, 0b1000000 },
        { 13, 0b1111000 },
        { 14, 0b0000111 },
    };

    const std::vector<std::string> expectedEdgesStrings = {
        "0123456",
        "0123465",
        "0123546",
        "0123564",
        "0123645",

        "-------",
        "-124356",
        "0-24365",
        "01-4536",
        "012456-",

        "012-635",
        "01246-3",
        "012534-",
        "012----",
        "---5436",
    };

    for (size_t i = 0; i < std::size(expectedEdgesStrings); ++i) {
        const auto &[ep, epi] = lexIndexEdges[i];
        auto strEdges = conv.lexIndexEdgesToIntEdgesAsStrWithIgnored(ep, epi);
        ASSERT_EQ(expectedEdgesStrings[i], strEdges);
    }
}

TEST(ruCubeStateConverterTest, convertLexIndexCornersToIntCornersAsStrWithIgnoredTest) {
    ruCubeStateConverter conv;

    const std::vector<std::tuple<   uint16_t,
                                    uint16_t,
                                    std::bitset<ruBaseCube::noOfCorners>, // cpi
                                    std::bitset<ruBaseCube::noOfCorners>>> lexIndexCubes { // coi
        { 0,    0,      0b0, 0b0 },
        { 1,    364,    0b0, 0b0 },
        { 2,    91,     0b0, 0b0 },
        { 3,    728,    0b0, 0b0 },
        { 4,    546,    0b0, 0b0 },

        { 5,    637,    0b0, 0b0 },
        { 6,    637,    0b0, 0b0 },
        { 7,    546,    0b0, 0b0 },
        { 8,    630,    0b0, 0b0 },
        { 9,    630,    0b0, 0b0 },

        { 10,   598,    0b0, 0b0 },


        { 0,    0,      0b111111, 0b111111 },
        { 1,    364,    0b0,      0b111111 },
        { 2,    91,     0b111111, 0b0 },
        { 3,    728,    0b001111, 0b001111 },
        { 4,    546,    0b010101, 0b101010 },

        { 5,    637,    0b000001, 0b100000 },
        { 6,    637,    0b000000, 0b000100 },
        { 7,    546,    0b011011, 0b011111 },
        { 8,    630,    0b100001, 0b100010 },
        { 9,    630,    0b000111, 0b111000 },

        { 10,   598,    0b010010, 0b010101 },
    };

    const std::vector<std::string> expectedCornersIntsAsStr = {
        "000102030405",
        "101112131514",
        "001102140315",
        "202122242523",
        "200122052304",

        "201122152413",
        "201123122415",
        "200123022504",
        "201123140205",
        "201123140502",

        "201113051214",


        "------------",
        "-0-1-2-3-5-4",
        "0-1-0-1-0-1-",
        "------2425--",
        "2--12--5-30-",

        "2-1122-52413",
        "201123-22415",
        "-------225--",
        "2--1231402--",
        "2-1--3-4-50-",
        "-01-1305-2--",
    };

    for (size_t i = 0; i < std::size(expectedCornersIntsAsStr); ++i) {
        const auto &[cp, co, cpi, coi] = lexIndexCubes[i];
        std::string cornersStr = conv.lexIndexCornersToIntCornersAsStrWithIgnored(cp, co, cpi, coi);
        ASSERT_EQ(expectedCornersIntsAsStr[i], cornersStr);
    }
}

#include "gtest/gtest.h"
#include "ruCubeStateValidator.h"


TEST(ruCubeStateValidatorTest, isVectEdgesValidTest) {
    ruCubeStateValidator validator;

    const std::vector<std::vector<int8_t>> permutations {
        { 0, 1, 2, 3, 4, 5, 6, },
        { 0, 1, 2, 3, 4, 6, 5, },
        { 0, 1, 2, 3, 5, 4, 6, },
        { 0, 1, 2, 3, 5, 6, 4, },
        { 0, 1, 2, 3, 6, 4, 5, },
        { 0, 1, 2, 3, 6, 5, 4, },
        { 0, 1, 2, 4, 3, 5, 6, },
        { 0, 1, 2, 4, 3, 6, 5, },
        { 0, 1, 2, 4, 5, 3, 6, },
        { 0, 1, 2, 4, 5, 6, 3, },
        { 0, 1, 2, 4, 6, 3, 5, },
        { 0, 1, 2, 4, 6, 5, 3, },
        { 0, 1, 2, 5, 3, 4, 6, },
        { 0, 1, 2, 5, 3, 6, 4, },
        { 0, 1, 2, 5, 4, 3, 6, },
        { 0, 1, 2, 5, 4, 6, 3, },
        { 0, 1, 2, 5, 6, 3, 4, },
        { 0, 1, 2, 5, 6, 4, 3, },
        { 0, 1, 2, 6, 3, 4, 5, },
        { 0, 1, 2, 6, 3, 5, 4, },
        { 0, 1, 2, 6, 4, 3, 5, },
        { 0, 1, 2, 6, 4, 5, 3, },
        { 0, 1, 2, 6, 5, 3, 4, },
        { 0, 1, 2, 6, 5, 4, 3, },
        { 0, 1, 3, 2, 4, 5, 6, },
        { 0, 1, 3, 2, 4, 6, 5, },
        { 0, 1, 3, 2, 5, 4, 6, },
        { 0, 1, 3, 2, 5, 6, 4, },
        { 0, 1, 3, 2, 6, 4, 5, },
        { 0, 1, 3, 2, 6, 5, 4, },
        { 0, 1, 3, 4, 2, 5, 6, },
        { 0, 1, 3, 4, 2, 6, 5, },
        { 0, 1, 3, 4, 5, 2, 6, },
        { 0, 1, 3, 4, 5, 6, 2, },
        { 0, 1, 3, 4, 6, 2, 5, },
        { 0, 1, 3, 4, 6, 5, 2, },
        { 0, 1, 3, 5, 2, 4, 6, },
        { 0, 1, 3, 5, 2, 6, 4, },
        { 0, 1, 3, 5, 4, 2, 6, },
        { 0, 1, 3, 5, 4, 6, 2, },
        { 0, 1, 3, 5, 6, 2, 4, },
        { 0, 1, 3, 5, 6, 4, 2, },
        { 0, 1, 3, 6, 2, 4, 5, },
        { 0, 1, 3, 6, 2, 5, 4, },
        { 0, 1, 3, 6, 4, 2, 5, },
        { 0, 1, 3, 6, 4, 5, 2, },
        { 0, 1, 3, 6, 5, 2, 4, },
        { 0, 1, 3, 6, 5, 4, 2, },
        { 0, 1, 4, 2, 3, 5, 6, },
        { 0, 1, 4, 2, 3, 6, 5, },
        { 0, 1, 4, 2, 5, 3, 6, },
        { 0, 1, 4, 2, 5, 6, 3, },
        { 0, 1, 4, 2, 6, 3, 5, },
        { 0, 1, 4, 2, 6, 5, 3, },
        { 0, 1, 4, 3, 2, 5, 6, },
        { 0, 1, 4, 3, 2, 6, 5, },
        { 0, 1, 4, 3, 5, 2, 6, },
        { 0, 1, 4, 3, 5, 6, 2, },
        { 0, 1, 4, 3, 6, 2, 5, },
        { 0, 1, 4, 3, 6, 5, 2, },
        { 0, 1, 4, 5, 2, 3, 6, },
        { 0, 1, 4, 5, 2, 6, 3, },
        { 0, 1, 4, 5, 3, 2, 6, },
        { 0, 1, 4, 5, 3, 6, 2, },
        { 0, 1, 4, 5, 6, 2, 3, },
        { 0, 1, 4, 5, 6, 3, 2, },
        { 0, 1, 4, 6, 2, 3, 5, },
        { 0, 1, 4, 6, 2, 5, 3, },
        { 0, 1, 4, 6, 3, 2, 5, },
        { 0, 1, 4, 6, 3, 5, 2, },
        { 0, 1, 4, 6, 5, 2, 3, },
        { 0, 1, 4, 6, 5, 3, 2, },
        { 0, 1, 5, 2, 3, 4, 6, },
        { 0, 1, 5, 2, 3, 6, 4, },
        { 0, 1, 5, 2, 4, 3, 6, },
        { 0, 1, 5, 2, 4, 6, 3, },
        { 0, 1, 5, 2, 6, 3, 4, },
        { 0, 1, 5, 2, 6, 4, 3, },
        { 0, 1, 5, 3, 2, 4, 6, },
        { 0, 1, 5, 3, 2, 6, 4, },
        { 0, 1, 5, 3, 4, 2, 6, },
        { 0, 1, 5, 3, 4, 6, 2, },
        { 0, 1, 5, 3, 6, 2, 4, },
        { 0, 1, 5, 3, 6, 4, 2, },
        { 0, 1, 5, 4, 2, 3, 6, },
        { 0, 1, 5, 4, 2, 6, 3, },
        { 0, 1, 5, 4, 3, 2, 6, },
        { 0, 1, 5, 4, 3, 6, 2, },
        { 0, 1, 5, 4, 6, 2, 3, },
        { 0, 1, 5, 4, 6, 3, 2, },
        { 0, 1, 5, 6, 2, 3, 4, },
        { 0, 1, 5, 6, 2, 4, 3, },
        { 0, 1, 5, 6, 3, 2, 4, },
        { 0, 1, 5, 6, 3, 4, 2, },
        { 0, 1, 5, 6, 4, 2, 3, },
        { 0, 1, 5, 6, 4, 3, 2, },
        { 0, 1, 6, 2, 3, 4, 5, },
        { 0, 1, 6, 2, 3, 5, 4, },
        { 0, 1, 6, 2, 4, 3, 5, },
        { 0, 1, 6, 2, 4, 5, 3, },
        { 0, 1, 6, 2, 5, 3, 4, },

        { -1,  1,  6,  2,  5, -1,  4 },
        { -1, -1, -1, -1, -1, -1, -1 },
    };

    const std::vector<bool> expectedValidities = std::vector<bool> (size(permutations), true);

    for (uint8_t i = 0; i < size(expectedValidities); ++i) {
        ASSERT_EQ(expectedValidities[i], validator.isVectEdgesValid(permutations[i]));
    }
}

TEST(ruCubeStateValidatorTest, isVectEdgesValidNegativeTest) {
    ruCubeStateValidator validator;

    const std::vector<std::vector<int8_t>> permutations {
        { },
        { -1 },
        { 0 },
        { 0, 1 },
        { 0, 1, 2 },
        { 0, 1, 2, 3 },
        { 0, 1, 2, 3, 4 },
        { 0, 1, 2, 3, 4, 5 },
        { 0, 1, 2, 3, 4, 5, 6, 7 },
        { 0, 1, 2, 3, 4, 4, 5 },
    };

    const std::vector<bool> expectedValidities = std::vector<bool> (size(permutations), false);

    for (uint8_t i = 0; i < size(expectedValidities); ++i) {
        ASSERT_EQ(expectedValidities[i], validator.isVectEdgesValid(permutations[i]));
    }
}
